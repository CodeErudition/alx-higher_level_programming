Testing BaseGeometry class

Creating an instance of BaseGeometry:
>>> from base_geometry import BaseGeometry
>>> bg = BaseGeometry()

Calling the area method, expecting an exception:
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

Testing integer_validator with valid inputs:
>>> bg.integer_validator("age", 10)
(no output, passes validation)

Testing integer_validator with a non-integer input:
>>> bg.integer_validator("age", "10")
Traceback (most recent call last):
    ...
TypeError: age must be an integer

Testing integer_validator with a zero value:
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

Testing integer_validator with a negative value:
>>> bg.integer_validator("age", -5)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

Testing integer_validator with a boolean value:
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

Testing integer_validator with a tuple value:
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
    ...
TypeError: age must be an integer

Testing integer_validator with a list value:
>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
    ...
TypeError: age must be an integer

Testing integer_validator with a set value:
>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
    ...
TypeError: age must be an integer

Testing integer_validator with a None value:
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

